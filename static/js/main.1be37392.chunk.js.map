{"version":3,"sources":["Components/Message/index.js","Components/App/styles.js","Components/utils/firebase.js","Components/App/index.js","serviceWorker.js","GlobalStyle.js","index.js"],"names":["Message","forwardRef","ref","username","content","isUser","data","Card","className","CardContent","Typography","variant","component","message","Form","styled","form","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","timestamp","FieldValue","serverTimestamp","App","useState","userName","setUserName","inputContent","setInputContent","messages","setMessages","useEffect","name","window","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","align","FormControl","InputLabel","color","Input","value","onChange","e","target","IconButton","disabled","type","onClick","preventDefault","add","key","Boolean","location","hostname","match","GlobalStyle","createGlobalStyle","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iRAQaA,G,MAAUC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,QAExCC,EAASF,IAAaC,EAAQE,KAAKH,SAEzC,OACC,yBAAKD,IAAKA,GACT,kBAACK,EAAA,EAAD,CACCC,UAAS,kBACRH,EAAS,mCAAqC,uBAE/C,kBAACI,EAAA,EAAD,KACEJ,EACA,kBAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,UACKR,EAAQE,KAAKO,UAGlB,kBAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,UACKR,EAAQE,KAAKH,SADlB,aAC+BC,EAAQE,KAAKO,iB,8MCrB3C,IAAMC,EAAOC,IAAOC,KAAV,K,8CCEjBC,gBAAuB,CACtBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAID,IAAMC,EAAKR,cAGLS,EAAYT,YAAmBU,WAAWC,gB,+BCGhD,SAASC,IAAM,MAEWC,mBAAS,IAFpB,mBAEdC,EAFc,KAEJC,EAFI,OAGmBF,mBAAS,IAH5B,mBAGdG,EAHc,KAGAC,EAHA,OAIWJ,mBAAS,IAJpB,mBAIdK,EAJc,KAIJC,EAJI,KAOrBC,qBAAU,WACT,IAAMC,EAAOC,OAAOC,OAAO,yBAC3BR,EAAYM,GAAc,kBACxB,IAGHD,qBAAU,WACTZ,EAAGgB,WAAW,YACZC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACZR,EACCQ,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAI1C,KAAMyC,EAAIzC,iBAGrD,IAmBH,OACC,oCACC,kBAACI,EAAA,EAAD,CACCuC,MAAM,SACNtC,QAAQ,MAFT,kBAE0BoB,IAC1B,kBAACjB,EAAD,KACC,kBAACoC,EAAA,EAAD,CAAa1C,UAAU,oBACtB,kBAAC2C,EAAA,EAAD,CAAYxC,QAAQ,WAAWyC,MAAM,WAArC,sBAGA,kBAACC,EAAA,EAAD,CACC7C,UAAU,aACV8C,MAAOrB,EACPsB,SA7BiB,SAACC,GAAD,OAAOtB,EAAgBsB,EAAEC,OAAOH,UA+BlD,kBAACI,EAAA,EAAD,CACClD,UAAU,kBACVmD,UAAW1B,EACXtB,QAAQ,YACRyC,MAAM,UACNQ,KAAK,SACLC,QAlCe,SAACL,GACpBA,EAAEM,iBAEFrC,EAAGgB,WAAW,YAAYsB,IAAI,CAC7B5D,SAAU4B,EACVlB,QAASoB,EACTP,UAAWA,MAIZQ,EAAgB,MAyBZ,kBAAC,IAAD,SAIH,kBAAC,IAAD,KACEC,EAASW,KAAI,SAACjC,GAAD,OACb,kBAACb,EAAD,CAASgE,IAAKnD,EAAQmC,GAAI7C,SAAU4B,EAAU3B,QAASS,SC/ExCoD,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2D,wJCdC,IAAMC,EAAcC,YAAH,KCExBC,iBACC,oCACC,kBAACF,EAAD,MACA,kBAACxC,EAAD,OAED2C,SAASC,eAAe,SFwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpE,c","file":"static/js/main.1be37392.chunk.js","sourcesContent":["//import react\nimport React, { forwardRef } from 'react';\n//import material design components\nimport { Card, CardContent, Typography } from '@material-ui/core';\n//import styles\nimport './styles.css';\n\n//create and export functional component\nexport const Message = forwardRef(({ username, content }, ref) => {\n\t//check if the user is the user of the app og another user\n\tconst isUser = username === content.data.username;\n\n\treturn (\n\t\t<div ref={ref}>\n\t\t\t<Card\n\t\t\t\tclassName={`message ${\n\t\t\t\t\tisUser ? 'message__user message__userCard ' : 'message__guestCard'\n\t\t\t\t}`}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{isUser ? (\n\t\t\t\t\t\t<Typography variant='h5' component='h2'>\n\t\t\t\t\t\t\t{`${content.data.message}`}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Typography variant='h5' component='h2'>\n\t\t\t\t\t\t\t{`${content.data.username}: ${content.data.message}`}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t)}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n});\n","//import styled components\nimport styled from 'styled-components'\n\n//creat and export Form component\nexport const Form = styled.form`\n  position:fixed;\n  padding:2rem;\n  bottom: 1rem;\n  z-index: 1;\n  background-color: rgba(0,0,0,.2);\n  width:80%;\n`","//import firebase\nimport * as firebase from 'firebase/app';\n//imort firestore\nimport 'firebase/firestore';\n\n//start de data base\nfirebase.initializeApp({\n\tapiKey: \"AIzaSyAj_0SXqCFY49F2Z-h2WEKmFX9ClVie7xk\",\n\tauthDomain: \"message-app-a67e3.firebaseapp.com\",\n\tdatabaseURL: \"https://message-app-a67e3.firebaseio.com\",\n\tprojectId: \"message-app-a67e3\",\n\tstorageBucket: \"message-app-a67e3.appspot.com\",\n\tmessagingSenderId: \"502325470559\",\n\tappId: \"1:502325470559:web:9fcaa1a8bea0154e8d02ea\"\n});\n\n//connection to data base\nexport const db = firebase.firestore();\n\n//timestamp and export it\nexport const timestamp = firebase.firestore.FieldValue.serverTimestamp","//import react adn its states\nimport React, { useState, useEffect } from 'react';\n//import message\nimport { Message } from '../Message';\n//import styled components\nimport { Form } from './styles';\n//import material ui components\nimport {\n\tInput,\n\tFormControl,\n\tInputLabel,\n\tTypography,\n\tIconButton,\n} from '@material-ui/core';\n//import data base\nimport { db, timestamp } from '../utils/firebase';\n// import flip move\nimport FlipMove from 'react-flip-move';\n//import send icon from material\nimport SendIcon from '@material-ui/icons/Send';\n//import styles\nimport './styles.css';\n\nexport function App() {\n\t//use state hook\n\tconst [userName, setUserName] = useState('');\n\tconst [inputContent, setInputContent] = useState('');\n\tconst [messages, setMessages] = useState([]);\n\n\t//use effect for ask the name\n\tuseEffect(() => {\n\t\tconst name = window.prompt('Plese enter your name');\n\t\tsetUserName(name ? name : 'Unknown user');\n\t}, []);\n\n\t//use effect to bring the date from data base\n\tuseEffect(() => {\n\t\tdb.collection('messages')\n\t\t\t.orderBy('timestamp', 'desc')\n\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\tsetMessages(\n\t\t\t\t\tsnapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() })),\n\t\t\t\t);\n\t\t\t});\n\t}, []);\n\n\t//const handler change\n\tconst handlerChange = (e) => setInputContent(e.target.value);\n\n\t//function to sen message\n\tconst sendMessage = (e) => {\n\t\te.preventDefault();\n\n\t\tdb.collection('messages').add({\n\t\t\tusername: userName,\n\t\t\tmessage: inputContent,\n\t\t\ttimestamp: timestamp(),\n\t\t});\n\n\t\t//set messages white\n\t\tsetInputContent('');\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Typography\n\t\t\t\talign='center'\n\t\t\t\tvariant='h5'>{`Welcome ${userName}`}</Typography>\n\t\t\t<Form>\n\t\t\t\t<FormControl className='app__formControl'>\n\t\t\t\t\t<InputLabel variant='outlined' color='primary'>\n\t\t\t\t\t\tEnter a message...\n\t\t\t\t\t</InputLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tclassName='app__input'\n\t\t\t\t\t\tvalue={inputContent}\n\t\t\t\t\t\tonChange={handlerChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tclassName='app__iconButton'\n\t\t\t\t\t\tdisabled={!inputContent}\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tonClick={sendMessage}>\n\t\t\t\t\t\t<SendIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</FormControl>\n\t\t\t</Form>\n\t\t\t<FlipMove>\n\t\t\t\t{messages.map((message) => (\n\t\t\t\t\t<Message key={message.id} username={userName} content={message} />\n\t\t\t\t))}\n\t\t\t</FlipMove>\n\t\t</>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//import createGlobal style\nimport { createGlobalStyle } from 'styled-components';\n\n//create global style and import it\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n  }\n\n  body{\n    padding: 1rem;\n  }\n`;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { GlobalStyle } from './GlobalStyle';\n\nrender(\n\t<>\n\t\t<GlobalStyle />\n\t\t<App />\n\t</>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}